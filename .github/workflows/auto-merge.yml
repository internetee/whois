name: Auto approve & merge Dependabot and Renovate PRs

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]
    branches: [master]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-approve-merge:
    runs-on: ubuntu-latest
    if: (github.actor == 'dependabot[bot]' || github.actor == 'renovate[bot]') && github.repository == 'internetee/whois'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
      - name: Auto approve PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Dependabot metadata
        if: github.actor == 'dependabot[bot]'
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR should be auto-merged
        id: check_auto_merge
        run: |
          # Set default UPDATE_TYPE to avoid unbound variable errors
          UPDATE_TYPE="${{ steps.metadata.outputs.update-type || 'unknown' }}"
          
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            if [[ "$UPDATE_TYPE" == "version-update:semver-patch" ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "Auto-merge: Dependabot patch update detected"
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "update_type=${UPDATE_TYPE}" >> $GITHUB_OUTPUT
              echo "Auto-merge: Dependabot non-patch update, skipping"
            fi
          elif [ "${{ github.actor }}" == "renovate[bot]" ]; then
            # Check if PR has patch label (set by renovate.json configuration)
            # Extract label names from the labels array
            LABEL_NAMES=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | tr '\n' ' ')
            if [[ "$LABEL_NAMES" == *"patch"* ]] || [[ "$LABEL_NAMES" == *"bundler"* ]] || [[ "$LABEL_NAMES" == *"ruby-version"* ]] || [[ "$LABEL_NAMES" == *"github-actions"* ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "Auto-merge: Renovate patch update detected (label-based): $LABEL_NAMES"
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "Auto-merge: Renovate non-patch update, skipping. Labels: $LABEL_NAMES"
            fi
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "update_type=${UPDATE_TYPE}" >> $GITHUB_OUTPUT
            echo "Auto-merge: Unknown actor, skipping"
          fi
        shell: bash

      - name: Wait for CI checks
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          check-regexp: 'test'

      - name: Auto-merge PR
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        run: |
          echo "Attempting to auto-merge PR #${{ github.event.pull_request.number }}"
          gh pr merge --auto --merge ${{ github.event.pull_request.number }} || {
            echo "Auto-merge failed, but continuing..."
            exit 0
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Mattermost about auto-merge
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        run: |
          if [ -z "${{ secrets.MATTERMOST_BOT_TOKEN }}" ] || [ -z "${{ secrets.MATTERMOST_CHANNEL_ID }}" ] || [ -z "${{ secrets.MATTERMOST_BASE_URL }}" ]; then
            echo "Missing Mattermost secrets (MATTERMOST_BOT_TOKEN, MATTERMOST_CHANNEL_ID, MATTERMOST_BASE_URL)" >&2
            exit 0
          fi
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
          curl -sS -X POST \
            -H "Authorization: Bearer ${{ secrets.MATTERMOST_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"channel_id\":\"${{ secrets.MATTERMOST_CHANNEL_ID }}\",\"message\":\"ðŸ¤– [${{ github.repository }}] PR #${{ github.event.pull_request.number }}: \\\"${{ github.event.pull_request.title }}\\\" was auto-merged by ${{ github.actor }}.\\nMerged at: $TIMESTAMP\\nLink: ${{ github.event.pull_request.html_url }}\"}" \
            "${{ secrets.MATTERMOST_BASE_URL }}/api/v4/posts"

